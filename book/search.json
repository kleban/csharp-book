[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Загальна інформація",
    "section": "",
    "text": "Про посібник\nМатеріали навчального посібника підготовлені для читання курсів “Основи програмування на C#”, “Програмування на C#” та “Обєктно-орінтоване програмування” студентам спеціальностей комп’ютерні науки та економічна кібернетика Національного університету “Острозька академія”.\n\n\n\nПередмова\nМатеріли створені з метою компактного та зрозумілого викладення матеріалу з основ програмування на мові C#. Завдання та приклади орієнтовані на студентів, що мають середній рівень математичної підготовки і вміють розв’язувати задачі з алгебри, геометрії, логіки, а також курсів, що повязані із основами математичного моделювання (статистика, економетрика, економічна кібернетика, дослідження операцій тощо).\nВикладений матеріал не претендує на повноту у описі можливостей мови програмування C#, проте, на думку автора, може стати базою для написання нескладних програм або фундаментом для подальшого поглиблення знань та умінь.\nЗауваження, побажання та відгуки прошу надсилати на елетронну адресу yura@kleban.page. Також додаткові матеріали та приклади програм, що використовуються у посібнику можна завантажити на сайті автора: http://kleban.page.\n\n\n\nОпис навчальної дисципліни\nНавчальна дисципліна спрямована на практичне застосування популярної концепції об’єктно-орієнтованого програмування і мови програмування C#. У процесі вивчення курсу «Програмування на C#» студенти ознайомлюються із базовими поняттями алгоритмізації, структурами даних та основами об’єктно-орієнтовного програмування.\nМісце навчальної дисципліни у підготовці здобувачів: програмні результати дисципліни використовуються під час вивчення таких навчальних дисциплін: «Розробка ігрових додатків», «Об’єктно-орієнтоване програмування», «Технології колективної роботи над проектом». Закріплення на практиці здобутих програмних результатів відбувається під час проходження Навчальної практики з дисципліни «Програмування на C#».\n\n\n\nМета та завдання навчальної дисципліни\nМета навчальної дисципліни – формування у студентів теоретичних знань та практичних навичок використання алгоритмічного та об’єктно-орієнтованого програмування при розв’язанні задач на базі технології .NET та мови програмування C#.\nЗавдання навчальної дисципліни - розвинути та набути у здобувачів освіти такі компетентності:\nзагальні:\n\nЗК1 - здатність до абстрактного мислення, аналізу та синтезу, а саме виокремлення важливих властивостей об’єктів та їх опис засобами мови програмування;\nЗК2 - здатність застосувати знання у практичних ситуаціях, а саме використання навичок програмування для розв’язування обчислювальних задач, а також збору, зберігання, передачі інформації;\nЗК6 - здатність вчитися і оволодівати сучасними знаннями, а саме вміння самостійно опрацьовувати документацію з описом бібліотек, спеціальних програмних пакетів для подальшого застосування у розробці програм;\nЗК8 - здатність генерувати нові ідеї (креативність), а саме знаходити та покращувати існуючі підходи до розв’язання класичних та нових задач, що виникають під час написання програмного забезпечення;\nЗК9 - здатність працювати в команді, а саме спільна робота над проектами з використанням системи контролю версій git та інструментальних засобів управління проектною діяльністю (дошки, списки задач, bugtracker-и).\n\nспеціальні:\n\nСК10 - здатність застосовувати методології, технології та інструментальні засоби для управління процесами життєвого циклу інформаційних і програмних систем, продуктів і сервісів інформаційних технологій відповідно до вимог замовника, а саме визначати вимоги до програмного забезпечення та способи імплементації потрібних рішень у вигляді готових рішень;\nСК14 - здатність застосовувати методи та засоби забезпечення інформаційної безпеки, розробляти й експлуатувати спеціальне програмне забезпечення захисту інформаційних ресурсів об’єктів критичної інформаційної інфраструктури, а саме шифрування та кодування інформації, а також безпечна передача даних у мережі;\nСК18 - здатність використовувати технології та патерни програмування для вирішення найбільш розповсюджених прикладних задач, модифікувати існуючі патерни для вирішення конкретної задачі при створенні програмної системи, а саме під час використання технологій WPF, ASP.NET, Blazor, Xamarin.\n\n\n\n\nДотримання принципів доброчесності\nВикладач та слухач цього курсу, як очікується, повинні дотримуватися Кодексу академічної доброчесності університету:\n\nбудь-яка робота, подана здобувачем протягом курсу, має бути його власною роботою здобувача; не вдаватися до кроків, що можуть нечесно покращити Ваші результати чи погіршити/покращити результати інших здобувачів;\nякщо буде виявлено ознаки плагіату або іншої недобросовісної академічної поведінки, то студент буде позбавлений можливості отримати передбачені бали за завдання;\nне публікувати у відкритому доступі відповіді на запитання, що використовуються в рамках курсу для оцінювання знань здобувачів;\nпід час фінальних видів контролю необхідно працювати самостійно; не дозволяється говорити або обговорювати, а також не можна копіювати документи, використовувати електронні засоби отримання інформації.\n\nПорушення академічної доброчесності під час виконання контрольних завдань призведе до втрати балів або вживання заходів, які передбачені Кодексу академічної доброчесності НаУОА.\n\n\n\n\n\n\nМатеріали курсу створені з використанням ряду технологій та середовищ розробки:\n\nМова C# - це об’єктно-орієнтована мова програмування, розроблена компанією Microsoft у 2000 році як частина платформи .NET.\nQuarto Book - система для публікації наукових та технічних текстів з відкритим кодом (R/Python/Julia/Observable).\nGit/Github - система контролю версій та, відповідно, сервіс для організації зберігання коду, а також публікації статичних сторінок.\nRStudio Desktop - інтегроване середовище розробки (IDE) для мови R з відкритим кодом, що містить в собі редактор коду, консоль, планер, засоби візуалізації та можливості.\nVisual Studio Code - інтегроване середовище розробки (IDE) з відкритим кодом практично для усіх відомих технологій та мов програмування.\n\n\n\n\nБібілографічний опис bibtex:\n@book{yk-csharp,\n  author       = {Юрій Клебан},\n  title        = {Програмування на C#},\n  publisher    = {Zenodo},\n  year         = 2025,\n  doi          = {10.5281/zenodo.7251419},\n  url          = {https://doi.org/10.5281/zenodo.7251419}\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Загальна інформація</span>"
    ]
  },
  {
    "objectID": "lecture-1.html",
    "href": "lecture-1.html",
    "title": "Тема 1. Вступ до курсу",
    "section": "",
    "text": "1.1. Загальні категорії та поняття програмування\nПеред початком вивчення програмування варто розглянути та розібрати базові поняття та категорії. Дамо визначення понять: алгоритм, задача, програмування, мова програмування, програма, програмне забезпечення, розробка програмного забезпечення.\nПрограмування – розробка програм за допомогою мов програмування.\nМова програмування – це формальна система знаків, що призначена для написання програм, зрозуміла для виконавця (комп’ютера).\nПрограма (program, routine) — впорядкована послідовність команд (інструкцій) комп’ютера для розв’язання задачі.\nПрограмне забезпечення (software) — сукупність програм обробки даних та необхідних для їх експлуатації документів. Програми призначені для машинної реалізації завдань (Задач). Терміни завдання і застосування (програма) мають дуже широке вживання в контексті інформатики і програмного забезпечення.\nЗавдання або задача (problem, task) — проблема, що підлягає вирішенню.\nЗастосування або програма (application) — програмна реалізація на комп’ютері рішення задачі.\nРозробка програмного забезпечення (англ. software engineering, software development) — це рід діяльності (професія) і процес, спрямований на створення і підтримку працездатності, якості та надійності програмного забезпечення, використовуючи технології, методологію та практики з інформатики, управління проектами, математики, інженерії та інших сфер знань.\nАлгоритм (Algorithmi, від імені перського математика IX ст. аль-Хорезмі) — система правил виконання обчислювального процесу, що обов’язково приводить до розв’язання певного класу задач після скінченного числа операцій. При написанні комп’ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми. Засоби швидкої розробки додатків (RAD) дозволяють створити програмний продукт, що складається з ряду застосувань, що дозволяють користувачам вводити дані в таблиці або редагувати вже існуючі дані, аналізувати введені дані і представляти їх у більш зручному для сприйняття вигляді - графіків, зведених таблиць або звітів (у тому числі у вигляді “паперових” документів).",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Тема 1. Вступ до курсу</span>"
    ]
  },
  {
    "objectID": "lecture-1.html#загальні-категорії-та-поняття-програмування",
    "href": "lecture-1.html#загальні-категорії-та-поняття-програмування",
    "title": "Тема 1. Вступ до курсу",
    "section": "",
    "text": "Note\n\n\n\nПрезентація до заняття:\n\n&lt;p&gt;This is an embedded &lt;a target=\"_blank\" href=\"https://office.com\"&gt;Microsoft Office&lt;/a&gt; presentation, powered by &lt;a target=\"_blank\" href=\"https://office.com/webapps\"&gt;Office&lt;/a&gt;.&lt;/p&gt;",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Тема 1. Вступ до курсу</span>"
    ]
  },
  {
    "objectID": "lecture-1.html#коротка-історія-мов-програмування-та-виникнення-c",
    "href": "lecture-1.html#коротка-історія-мов-програмування-та-виникнення-c",
    "title": "Тема 1. Вступ до курсу",
    "section": "1.2. Коротка історія мов програмування та виникнення C",
    "text": "1.2. Коротка історія мов програмування та виникнення C\n\n1.2.1. Парадигми програмування\nУсе програмування прийнято поділяти на два основних види:\n\nДекларативне.\nІмперативне.\n\nДекларативне програмування — термін з двома різними значеннями. Згідно першому визначенню, програма «декларативна», якщо вона описує щось, а не як його створити. Наприклад, веб-сторінки на HTML декларативні, оскільки вони описують що повинна містити сторінка, а не як відображати сторінку на екрані. Цей підхід відрізняється від мов імперативного програмування, що вимагають від програміста вказувати алгоритм для виконання.\nЗгідно другому визначенню, програма «декларативна», якщо вона написана на виключно функціональній, логічній або константній мові програмування.\nІмперативне програмування — парадигма програмування, згідно з якою описується процес отримання результатів як послідовність інструкцій зміни стану програми. Подібно до того, як з допомогою наказового способу в мовознавстві перелічується послідовність дій, що необхідно виконати, імперативні програми є послідовністю операцій комп’ютеру для виконання.\nПарадигма програмування — це спосіб мислення розробника програми. Мова програмування може підтримувати або не підтримувати ту чи іншу парадигму. В першому випадку застосування парадигми стає зручним, тобто простим, безпечним і ефективним. Ми розглянемо три основних наказових парадигми — процедурне, об’єктне (модульне) і об’єктно-орієнтовне (ієрархічне) програмування.\n\n\n1.2.2. Процедурне програмування\nПроцедурне програмування подає програму у вигляді набору алгоритмів, для оформлення яких можуть застосовуватися іменовані програмні блоки — процедури і функції. В останньому випадку передбачається наявність механізмів передачі параметрів і поверненні результату.\nСпочатку процедурне програмування користувалося довільними засобами керування, в тому числі, переходом за міткою — одним з найбільш вживаних операторів керування в Фортрані.\nДо мов процедурного програмування відносяться Fortran, Cobol, Pascal, Basic, та інші.\nВ 1968 році голландський вчений Е. Дейкстра вперше звернув увагу на проблеми, що виникають у програмах з неконтрольованими переходами, в 1970 році проголосив новий напрямок, який він назвав структур(ова)ним програмуванням.\nСтруктурне програмування — це варіант процедурного, що вживає три типи структур керування: послідовне виконання дій, розгалуження і цикл. Не дивно, що Фортран не підтримував цю парадигму — в наборі його засобів не було циклів за умовами. Починаючи з Алголу, а особливо в Паскалі, цикли стають основним засобом організації обчислень в програмі.\nАвтор Паскалю, професор Н. Вірт, відібрав до створюваної ним мови програмування лише прості в поясненні і легкі в реалізації конструкції. Завдяки сильній типізації програми в Паскалі відзначаються високою надійністю, вони мобільні завдяки закладеній в них концепції Паскаль-машини, їх легко читати і розуміти завдяки дисципліні програмування, продиктованої вжитою парадигмою.\nАле разом з цим застосування Паскалю гальмувалося саме складністю виходу за межі віртуальної машини, потребою ефективного використання наявної апаратури. Головним критерієм, вжитим Б.Керніганом і Д.Річі до створеної ними мови С, стала саме гнучкість використання особливостей конкретної апаратури і ефективність виконання програм.\n\n\n1.2.3. Об’єктне (модульне) програмування\nПроцедурна парадигма віддала належне алгоритмічній компоненті програмування. Але з ростом обсягу програм і складності даних з’явилася нова проблема структурної організації даних, найбільш ємко висловлена Віртовською формулою алгоритми + структури даних = програми.\nПоняття модуля як абстракції даних було вперше запропоноване Парнасом у 1972 році, правда на той час уже існувала мова програмування Симула 67, в якій використовувалася парадигма об’єктів. У найбільш повному виді поняття абстракції даних було реалізоване в мові програмування Модула-2.\nГоловна ідея полягає в забезпеченні доступу до даних, не залежному від їх конкретного представлення. Самі дані і програми їх обробки вбудовуються (інкапсулюються) в окремій одиниці програми.\n\n\n1.2.4. Об’єктно-орієнтовне програмування\nОб’єктно-орієнтована парадигма наділила класи ієрархією.\nОб’єктно-орієнтоване програмування за метафорою Б.Страуструпа, автора С++ — однієї з найпопулярніших мов об’єктно-орієнтованого програмування, — це високоінтелектуальний синонім доброго програмування. Дійсно, нові парадигми програмування з’являються не так часто, не частіше однієї в десятиліття. Той факт, що об’єктно-орієнтована парадигма успішно використовується протягом 20 років, сам по собі служить вагомим підтвердженням її життєздатності.\nАлгоритми, реалізовані в процедурному програмуванні, надто конкретні. Будь-яка модифікація — це вже новий алгоритм і таким чином кількість процедур і функцій, що знаходяться у використанні, надмірно зростає. Модульне програмування групує алгоритми в модулі, одночасно інкапсулюючи структури даних. Тепер залишається зробити наступний крок — побудувати ієрархію модулів або класів.\nТаких ієрархій може бути дві. Перша з них — бути частиною чогось. Наприклад, грань є частиною многогранника, ребро — частиною грані, вершина — частиною ребра. Інша ієрархія — бути узагальненням або конкретизацією.\nНаприклад, овал і многокутник служать конкретизацією плоскої фігури, коло — конкретизацією овалу, чотирикутник — конкретизацією многокутника, подальшими конкретизаціями чотирикутника можуть служити паралелограм, прямокутник, ромб, квадрат. Той факт, що квадрат, ромб, прямокутник є повноцінними паралелограмами дозволяє їм користуватися усіма програмними засобами, створеними для паралелограма, паралелограм в свою чергу є повноцінним чотирикутником і так далі. Цей принцип, відомий під назвою reusable — знову вживаний — став одним з найважливіших досягнень об’єктно-орієнтованої парадигми. Знову вживаючи вже існуюче програмне забезпечення в більш конкретизованих умовах, ми дописуємо лише ту його частину, яка стосується особливостей наявної конкретизації. Цей принцип дістав назву programming by difference або дописування програм.\nІ, нарешті, об’єктно-орієнтована парадигма доводить до логічної завершеності принцип моделювання реального світу, а точніше тієї його частини, абстракцією якої служить програма. При цьому підході програма складається з об’єктів, що відповідають реальним поняттям або предметам. Виконання програми зводиться до взаємодії об’єктів, яке служить абстракцією реальної взаємодії їх прототипів. Все це разом забезпечило об’єктно-орієнтованому підходу беззаперечне лідерство в галузі розробки програм.\nСьогодні в сімействі мов об’єктно-орієнтованого програмування три найбільш відомих представника: С++, Java і C# ( читається Сі шарп ). С++ і сьогодні залишається визнаним лідерів в розробці великих і складних програмних систем. Java і C# виросли з С++.",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Тема 1. Вступ до курсу</span>"
    ]
  },
  {
    "objectID": "lecture-1.html#еволюція-мови-програмування-c",
    "href": "lecture-1.html#еволюція-мови-програмування-c",
    "title": "Тема 1. Вступ до курсу",
    "section": "1.3. Еволюція мови програмування C",
    "text": "1.3. Еволюція мови програмування C\n\n1.3.1 Створення ООП та C++\nДо кінця 1970-х розмір проектів став наближатися до критичного, при перевищенні якого методика структурного програмування і мова С “опускали руки”. Тому стали з’являтися нові підходи до програмування, що дозволяють вирішити цю проблему. Один з них отримав назву об’єктно-орієнтованого програмування (ООП). Використовуючи ООП, програміст міг справлятися з програмами набагато більшого розміру, ніж раніше. Але проблема полягала у тому, що С, найпопулярніша на той час мова, не підтримувала ООП. Бажання працювати з об’єктно-орієнтованою версією мови С врешті-решт і привело до створення C++.\nМова C++ була розроблена Бьорном Страуструпом (Bjarne Stroustrup) в компанії Bell Laboratories (Нью-Джерсі), роком створення вважається 1979-й. Спочатку творець нової мови назвав її “С з класами”, але в 1983 році це ім’я було змінене на C++. C++ повністю включає елементи мови С. Таким чином, С можна вважати фундаментом, на якому побудований C++. Більшість доповнень, які Страуструп вніс до С, були призначені для підтримки об’єктно-орієнтованого програмування. По суті, C++ - це об’єктно-орієнтована версія мови С. Створюючи С++ на основі С Страуструп забезпечив плавний перехід багатьох програмістів на ООП.\nЗамість необхідності вивчати абсолютно нову мову, С-програмістові досить було освоїти лише нові засоби, що дозволяють використовувати переваги об’єктно-орієнтованої методики.\nВпродовж 1980-х років C++ інтенсивно розвивалася і на початок 1990-х вже була готовп для широкого використання. Зростання її популярності носило вибухоподібний характер, і до кінця цього десятиліття вона стала найбільш використовуваною мовою програмування. В наші дні мова C++ як і раніше має безперечну перевагу при розробці високопродуктивних програм системного рівня.\n\n\n1.3.2 Internet та поява мови Java\nНаступним рівнем на сходах прогресу мов програмування стала мова Java, яка спочатку називалася Oak (у перекладі з англ. “дуб”). Робота над її створенням почалася в 1991 році в компанії Sun Microsystems. Основною рушійною силою розробки Java був Джеймс Гослінг (James Gosling).\nJava - це структурна об’єктно-орієнтована мова програмування, синтаксис і принципи якої “родом” з C++. Своїми новаторськими аспектами Java зобов’язана не стільки прогресу в мистецтві програмування (хоча і це мало місце), скільки змінам в комп’ютерному середовищі. Ще до настання ери Internet більшість програм писалися, компілювалися і призначалися для виконання з використанням певного процесора і під управлінням конкретної операційної системи. Не дивлячись на те що програмісти завжди прагнули робити свої програми так, щоб їх можна було застосовувати неодноразово, можливість легко переносити програму з одного середовища в іншу не була ще досягнута, до того ж проблема переносимості постійно вікладалися, вирішувалися ж більш насущні проблеми. Проте з появою всесвітньої мережі Internet, в якій виявилися зв’язаними різні типи процесорів і операційних систем, стара проблема портативності заявила про себе вже в повний голос. Для її вирішення знадобилася нова мова програмування, і нею стала Java.\nЦікаво відзначити, що, хоча єдиним найбільш важливим аспектом Java (і причиною швидкого визнання) є можливість створювати на ній кросплатформений (сумісний з декількома операційними середовищами) переносимий програмний код, вихідним імпульсом для виникнення Java стала не мережа Internet, а наполеглива потреба у незалежній від платформи мові, яку можна було б використовувати в процесі створення програмного забезпечення для вбудованих контролерів. У 1993 році стало очевидним, що проблеми міжплатформеної переносимості, що чітко виявилися при створенні коду в вбудованих контролерів, також виявилися актуальними при спробі написати код для Internet. Адже Internet - це величезне комп’ютерне середовище, в якому “мешкає” безліч комп’ютерів різних типів. І виявилось, що одні і ті ж методи вирішення проблеми переносимості в малих масштабах можна успішно застосувати і до набагато більших, тобто в Internet У Java переносимість досягається за допомогою перетворення вихідного коду програми в проміжний код, що іменується байт-кодом), тобто машинно-незалежний код, що генерується Java-компілятором. Байт-код виконується віртуальною машиною Java (Java Virtual Machine - JVM) - спеціальною операційною системою. Отже, Java-программа могла б працювати в будь-якому середовищі, де доступна JVM. А оскільки JVM відносно проста для реалізації, вона швидко стала доступною для великої кількості середовищ.\nВикористання Java-програмами байт-коду радикально відрізняло їх від С- і С++-програм. Якщо С/С++-программу потрібно виконати в іншій системі, її необхідно перекомпілювати в машинний код, відповідний цьому середовищу. Отже, аби створити С/С++-програму, призначену для виконання в різних середовищах, необхідно мати декілька різних виконуваних (машинних) версій цієї програми. Це було непрактично і дорого. І навпаки, використання для виконання Java-программ проміжної мови було елегантним і рентабельним рішенням. Саме це рішення було адаптоване для мови С#.\n\n\n1.3.3. Виникнення C\nРозробники Java успішно вирішили багато проблем, пов’язаних з переносимістю в середовищі Internet, але далеко не всі. Одна з них - міжмовна можливість взаємодії (cross-language interoperability) програмних і апаратних виробів різних постачальників, або багатомовне програмування (mixed-language programming). В разі вирішення цієї проблеми програми, написані на різних мовах, могли б успішно працювати одна з іншою. Така взаємодія необхідна для створення великих систем з розподіленим програмним забезпеченням (ПЗ), а також для програмування компонентів ПЗ, оскільки найціннішим є компонент, який можна використовувати у широкому діапазоні комп’ютерних мов і операційних середовищ.\nКрім того, в Java не досягнута повна інтеграція з платформою Windows. Хоча Java-програми можуть виконуватися в середовищі Windows (за умови встанолення віртуальної машини Java), Java і Windows не є міцно зв’язаними середовищами. А оскільки Windows - це найбільш широко використовувана операційна система в світі, відсутність прямої підтримки Windows - серйозний недолік Java.\nАби задовольнити ці потреби, Microsoft розробила мову С#, С# була створена в кінці 1990-х років і стала частиною спільної .NET-стратегії Microsoft. Вперше вона побачила світло як альфа-версія в середині 2000 року. Головним архітектором С# був Андерс Хейлсберг (Anders Hejlsberg) - один з провідних фахівців в області мов програмування, що отримав визнання у всьому світі. Досить сказати, що в 1980-х він був автором успішного продукту Turbo Pascal, витончена реалізація якого встановила стандарт для всіх майбутніх компіляторів.\n\n\n\n\n\ngraph TD;\n  C--&gt;C++;\n  C++--&gt;Java;\n  C++--&gt;C#;\n\n\n\n\n\n\nРис. 1.1. Розвиток мов програмування C/C++/Java/C#\n\nС# безпосередньо пов’язаний із С, C++ і Java. І це не випадково. Ці три мови - найпопулярніші і найулюбленіші мови програмування в світі. Більш того, майже всі професійні програмісти сьогодні знають С і C++, і більшість знає Java. Оскільки С# побудований на міцному, зрозумілому фундаменті, то перехід від цих “фундаментальних” мов до “надбудови” відбувається без особливих зусиль з боку програмістів. Оскільки Андерс Хейлсберг не збирався винаходити нову мову, він зосередився на введенні удосконалень.\nПрамовою С# є мова С. Від С мова С# успадкувала синтаксис, багато ключових слів і оператори. Крім того, С# побудований на покращеній об’єктній моделі, визначеній в C++.\nС# і Java зв’язані між собою дещо складніше. Як згадувалося вищим, Java також є нащадком С і C++. У неї теж загальний з нею синтаксис і схожа об’єктна модель. Подібно Java C# призначений для створення переносимого коду. Проте С# - не нащадок Java. Швидше С# і Java можна вважати двоюрідними братами, що мають загальних предків, але що отримали від батьків різні набори “генів”.",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Тема 1. Вступ до курсу</span>"
    ]
  },
  {
    "objectID": "lecture-1.html#net-framework-поняття-та-структура",
    "href": "lecture-1.html#net-framework-поняття-та-структура",
    "title": "Тема 1. Вступ до курсу",
    "section": "1.4 .NET Framework: поняття та структура",
    "text": "1.4 .NET Framework: поняття та структура\nПлатформа — у контексті інформаційних технологій - середовище, що забезпечує виконання програмного коду. Платформа визначається характеристиками процесорів, особливостями операційних систем.\nFramework — це інфраструктура середовища виконання програм, щось, що визначає особливості розробки і виконання програмного коду на даній платформі. Передбачає засоби організації взаємодії з операційною системою і прикладними програмами, методи доступу до баз даних, засоби підтримки розподілених (мережевих) додатків, мови програмування, безліч базових класів, уніфіковані інтерфейси користувача, парадигми програмування. Microsoft .NET — платформа.\n.NET Framework — інфраструктура платформи Microsoft .NET. Включає наступні основні компоненти: Common Language Runtime (CLR) і .NET Framework Class Library (.NET FCL).\nCLS (Common Language Specification) — загальна специфікація мов програмування. Це набір конструкцій і обмежень, які є інструкцією для розробників бібліотек і компіляторів в середовищі .NET Framework. Бібліотеки, побудовані відповідно до CLS, можуть бути використані у будь-якій мові програмування, що підтримує CLS. Мови, відповідні CLS (до їх числа відносяться мови Visual C#, Visual Basic, Visual C++), можуть інтегруватися один з одним. CLS - це основа міжмовної взаємодії в рамках платформи Microsoft .NET.\nCLR (Common Language Runtime) — Середовище Часу Виконання або Віртуальна Машина. Забезпечує виконання збірки. Основний компонент .NET Framework. Під Віртуальною Машиною розуміють абстракцію інкапсульованої (відособленої) керованої операційної системи високого рівня, яка забезпечує виконання (керованого) програмного коду.\nКерований код — програмний код, який під час виконання здатний використовувати служби, що надаються CLR. Відповідно, некерований код подібною здатністю не володіє.\nТобто, CLR - це набір служб, необхідних для виконання керованого коду. Сама CLR складається з двох головних компонентів: ядра (mscoree.dll) і бібліотеки базових класів (mscorlib.dll). Наявність цих файлів на диску - ознака того, що на комп’ютері, принаймні, була зроблена спроба встановлення платформи .NET.\nFCL (.NET Framework Class Library) — відповідна CLS-спеціфікаціії об’єктно-орієнтована бібліотека класів, інтерфейсів і системи типів (типів-значень), які включаються до складу платформи Microsoft .NET. Ця бібліотека забезпечує доступ до функціональних можливостей системи і призначена служити основою при розробці .NET-додатків, компонент, елементів управління.\n.NET бібліотека класів є другим компонентом CLR. .NET FCL можуть використовувати усі\n.NET-додатки, незалежно від призначення архітектури використовуваного при розробці мови програмування, і зокрема:\n\nвбудовані (елементарні) типи, представлені у вигляді класів (на платформі .NET все побудовано на структурах або класах);\nкласи для розробки графічного користувацького інтерфейсу (Windows Forms);\nкласи для розробки web-додатків і web-служб на основі технології ASP.NET (Web Forms);\nкласи для розробки XML і Internet-протоколів (FTP, HTTP, SMTP, SOAP);\nкласи для розробки додатків, що працюють з базами даних (ADO .NET) і багато що інших.\n\n.NET-застосування — програма, розроблена для виконання на платформі Microsoft .NET. Реалізується на мовах програмування, відповідних CLS.\nMSIL (Microsoft Intermediate Language) — проміжна мова платформи Microsoft .NET. Вихідні тексти програм для .NET-додатків пишуться на мовах програмування, відповідних специфікації CLS. Для таких мов може бути побудований перетворювач в MSIL. Таким чином, програми на цих мовах можуть транслюватися в проміжний код на MSIL. Завдяки відповідності CLS, в результаті трансляції програмного коду, написаного на різних мовах, виходить сумісний IL-код.\nСхема виконання .NET додатків у середовищі CLR:\n\n\n\n\n1.2. Процес запуску .NET-програми\n\n\n\n\n\n\nNote\n\n\n\nУсі блок-схеми створено у draw.io.&lt;br&gt; Файли можна знайти у github репозиторії курсу.\n\n\nУ середовищі CLR допускається спільна робота і взаємодія компонентів програмного забезпечення, реалізованих на різних мовах програмування. CLR бере на себе вирішення багатьох проблем, які традиційно знаходилися в зоні особливої уваги розробників програмного забезпечення.\nДо функцій, виконуваних CLR, відносяться:\n\nПеревірка і динамічна (JIT) компіляція MSIL-коду у команди процесора.\nУправління пам’яттю, процесами і потоками.\nОрганізація взаємодії процесів.\nВирішення проблем безпеки (в рамках безпеки, що існує в системі політики).\n\n\n\n\n\n\n\n\nWarning\n\n\n\nДорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Тема 1. Вступ до курсу</span>"
    ]
  },
  {
    "objectID": "lecture-2.html",
    "href": "lecture-2.html",
    "title": "Тема 2. Основи алгоритмізації",
    "section": "",
    "text": "2.1. Поняття та характеристики алгоритмів\nУ лекції розглядаються матеріали: поняття та характеристики алгоритмів, побудова алгоритмів з використанням блок-схем, ствоерення блок-схем з використанням Diagramm Designer та draw.io. Також розглядаються основні елементи для побудови блок-схем алгоритмів та приклади реалізації.\nСлово алгоритм походить від імені перського вченого, астронома та математика Аль-Хорезмі. Близько 825 до н. е. він написав трактат, в якому описав придуману в Індії позиційну десяткову систему числення. В першій половині XII століття книжка потрапила до Європи в перекладі латинською мовою під назвою Algoritmi de numero Indorum. Вважається, що перше слово в перекладі відповідає невдалій латинізації імені Аль-Хорезмі, а назва перекладу звучить як «Алгорітмі про індійську лічбу».\nРис. 2.1. Баронеса Ада Лавлейс, яку вважають першим програмістом. Джерело: Wikipedia”\nРозглянемо визначення поняття алгоритм.\nАлгоритм являє собою послідовність розпоряджень виконавцю. Виконавець повинен неухильно виконувати ці розпорядження. Число таких розпоряджень не є обов’язковим: воно може складати кілька тисяч, мільйонів і навіть трильйонів, але воно не може бути нескінченним. І коли виконавець виконає всі розпорядження, задача, для якої був створений алгоритм, буде вирішена.\nАлгоритм — система правил виконання обчислювального процесу, що обов’язково приводить до розв’язання певного класу задач після скінченного числа операцій. При написанні комп’ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми.\nКожен алгоритм є списком точно визначених інструкцій для розв’язання задачі. Починаючи з початкового стану, інструкції алгоритму описують процес обчислення, які відбуваються через послідовність станів, які, зрештою, завершуються кінцевим станом. Перехід з одного стану до наступного не обов’язково детермінований — деякі алгоритми містять елементи випадковості.\nАлгоритм — це опис процесу вирішення того чи іншого завдання. Алгоритмом називається кінцевий набір правил, розташованих у певному логічному порядку, що дозволяє виконавцю вирішувати будь-яку конкретну задачу з деякого класу однотипних задач.\nАлгоритми мають ряд важливих властивостей:\nВиділяють наступні основні способи запису алгоритмів:\nРозглянемо приклад розв’язання задачі.\nЗадача 1. Скласти алгоритм ров’язання квадратного рівняння на комп’ютері та записати його вербальним способом (описати словами).\nНагадаємо, квадратне рівняння має вигляд: \\({ax^2 + bx + c = 0}\\).\nЕтапи розв’язання задачі:\nЦя ж задача на мові програмування C# має вигляд (символьний запис):\nЛістинг 2.1. Розв’язання квадратного рівняння.",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Тема 2. Основи алгоритмізації</span>"
    ]
  },
  {
    "objectID": "lecture-2.html#поняття-та-характеристики-алгоритмів",
    "href": "lecture-2.html#поняття-та-характеристики-алгоритмів",
    "title": "Тема 2. Основи алгоритмізації",
    "section": "",
    "text": "Перший алгоритм, призначений для виконання на автоматичному обчислювальному пристрої (комп’ютері), описала Ада Лавлейс в 1843 році. Алгоритм мав обчислювати числа Бернуллі й працювати на аналітичній машині Беббіджа. Цей алгоритм вважається першою комп’ютерною програмою, а його розробниця, Ада Лавлейс — першим програмістом.\n\n\n\n\n\n\n\n\n\nСкінченність. Алгоритм має завжди завершуватись після виконання скінченної кількості кроків. Процедуру, яка має решту характеристик алгоритму, без, можливо, скінченності, називають методом обчислень.\nДискретність. Процес, що визначається алгоритмом, можна розчленувати (розділити) на окремі елементарні етапи (кроки), кожен з яких називається кроком алгоритмічного процесу чи алгоритму.\nВизначеність. Кожен крок алгоритму має бути точно визначений. Дії, які необхідно здійснити, повинні бути чітко та недвозначно визначені для кожного можливого випадку.\nВхідні дані. Алгоритм має деяку кількість (можливо, нульову) вхідних даних, тобто, величин, заданих до початку його роботи або значення яких визначають під час роботи алгоритму.\nВихідні дані. Алгоритм має одне або декілька вихідних даних, тобто, величин, що мають досить визначений зв’язок із вхідними даними.\nЕфективність. Алгоритм вважають ефективним, якщо всі його оператори досить прості для того, аби їх можна було точно виконати за скінченний проміжок часу з допомогою олівця та аркушу паперу.\n\n\n\nвербальний - алгоритм описується на природній мові;\nсимвольний - алгоритм описується за допомогою набору символів;\nграфічний - алгоритм описується за допомогою набору графічних зображень.\n\n\n\n\n\n\n\nВводимо значення \\(a\\), \\(b\\), \\(c\\).\nОбчислюємо дискримінант за фрмулою \\(d = b^2 - 4ac\\).\nЯкщо \\(d &gt; 0\\) обчислити корені \\(x_1\\), \\(x_2\\) за формулою \\(x=\\frac{b ± \\sqrt{d}}{2a}\\) та вивести їх значення на екран. Інакше, якщо \\(d = 0\\) – обчислити \\(x_1=-\\frac{b}{2a}\\) і вивести на екран. Інакше вивести на екран «Коренів немає».\nВийти з програми.\n\n\n\nstatic void Main(string[] args)\n{\n    //Оголошуємо змінні\n    double a, b, c, d, x1, x2;\n\n    //Вводимо значення змінних з клавіатури\n    Console.WriteLine(\"Введіть a:\");\n    a = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine(\"Введіть b:\");\n    b = Convert.ToDouble(Console.ReadLine());\n    Console.WriteLine(\"Введіть c:\");\n    c = Convert.ToDouble(Console.ReadLine());\n\n    //Знаходимо дискримінант\n    d = b * b - 4 * a * c;\n\n    if (d &gt; 0)\n    {\n        x1 = (-b + Math.Sqrt(d)) / (2 * a);\n        x2 = (-b - Math.Sqrt(d)) / (2 * a);\n        Console.WriteLine(\"x1 = {0}, x2 = {1}\", x1, x2);\n    }\n    else if (d == 0)\n    {\n        x1 = -b / (2 * a);\n        Console.WriteLine(\"x = {0}\", x1);\n    }\n    else\n        Console.WriteLine(\"Коренів не існує.\");\n    //Вихід з програми\n}",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Тема 2. Основи алгоритмізації</span>"
    ]
  },
  {
    "objectID": "lecture-2.html#побудова-алгоритмів-з-використанням-блок-схем",
    "href": "lecture-2.html#побудова-алгоритмів-з-використанням-блок-схем",
    "title": "Тема 2. Основи алгоритмізації",
    "section": "2.2. Побудова алгоритмів з використанням блок-схем",
    "text": "2.2. Побудова алгоритмів з використанням блок-схем\nДля зображення алгоритмів використовуватимемо блок-схеми, що формуються з типових блоків:\n\n\n\n\nРис. 2.2. Типові блоки для формування блок-схем алгоритмів.”\n\n\n\n\n\n\n\nNote\n\n\n\nУсі блок-схеми створено у draw.io. Файли можна знайти у github репозиторії курсу.\n\n\nУ теорії алгоритмів доведено, що будь-який, скільки завгодно складний алгоритм може бути складений з трьох основних алгоритмічних структур: лінійної, розгалуження і циклу, показаних, відповідно на рис. 2.3.\n\n\n\n\nРис. 2.3. Основні алгоритмічні структури\n\nЛінійна структура передбачає послідовне виконання дій, без їх повторення або пропуску деяких дій. Зазвичай програмісти прагнуть до того, аби алгоритм мав лінійну структуру.\nСтруктура “розгалуження” передбачає виконання однієї з двох груп дій залежно від виконання умови у блоці розгалуження. На рис. 3 знаком “+” показано виконання умови, а знаком “-” - його невиконання. Часто використовується неповна команда розгалуження, коли один з блоків дії відсутній.\nСтруктура “цикл” має декілька різновидів. На рис. 3 показаний цикл типу “доки” (while) з передумовою. Дії всередині цього циклу повторюються доки виконується умова у блоці розгалуження, причому спочатку перевіряється умова, а потім виконується дія. Досить часто використовуються інші типи циклу, показані на рис. 2.4.\n\n\n\n\nРис. 2.4. Зображення циклів за допомогою блок-схем\n\nУ циклі з після умовою перевірка умови виходу з циклу виконується після чергової дії. Цикл “для (for)” є модифікацією циклу “доки (while)” для ситуації, коли заздалегідь відома кількість повторень деяких дій. Запис у блоці заголовка циклу на рис.3 показує приклад опису заголовка циклу, в якому дії повторюються стільки раз, скільки цілих значень набуває параметра циклу i від свого початкового значення 1 до кінцевого N з кроком 1. Зазвичай крок не вказується, якщо він дорівнює 1.\nТепер запишемо алгоритм розв’язання задачі 1 у графічному вигляді.\n\n\n\n\nРис. 2.5. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №1\n\nДля закріплення знань по лінійних структурах та розгалуженнях побудуємо графічне відображення алгоритмів для кількох задач.\n\n Задача 2. Побудувати блок-схему алгоритму перевірки введеного числа на невід’ємність.\n Розвязання задачі графічним способом:\n\n\n\n\nРис. 2.6. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №2\n\n\n Задача 3. Побудувати блок-схему алгоритму зходження периметра та площі трикутника за формулою Герона.\n Розвязання задачі графічним способом:\n\n\n\n\nРис. 2.7. Блок-схема алгоритму до задачі №3\n\n\n Задача 4. Побудувати блок-схему алгоритму порівняння двох чисел.\n Розвязання задачі графічним способом:\n\n\n\n\nРис. 2.8. Блок-схема до задачі №4\n\n\nДля закріплення знань по циклічних структурах побудуємо графічне відображення алгоритмів для кількох задач.\n Задача 5. Побудувати блок-схему алгоритму знаходження суми елементів у масиву.\n Введемо позначення: \\(n\\) – кількість елементів масиву, \\(sum\\) – змінна, що визначає суму, \\(x_i\\) – \\(і\\)-й елемент масиву.\n Розвязання задачі графічним способом:\n\n\n\n\nРис. 2.9. Блок-схема до задачі №5\n\n\n Задача 6. Побудувати блок-схему алгоритму знаходження середнього значення елементів масиву.\n Ця задача відрізнється від попередньої лише появою нової змінної \\(avg\\) – середнє значення.\n Розвязання задачі графічним способом:\n\n\n\n\nРис. 2.10. Блок-схема до задачі №6\n\n\n Задача 7. Побудувати блок-схему алгоритму знаходження максимального елемента у масиві.\n Введемо позначення: \\(max\\) – максимальний елемент, \\(n\\) - кількість елементів у масиві, \\(x_i\\) – \\(і\\)-й елемент масиву. Припускаємо що масив уже заповнений і наперед відомо кількість елементів у масиві.\n Розвязання задачі графічним способом:\n\n\n\n\nРис. 2.11. Блок-схема до задачі №7",
    "crumbs": [
      "Частина 1. Основи алгоритмізації та програмування",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Тема 2. Основи алгоритмізації</span>"
    ]
  }
]