[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Загальна інформація",
    "section": "",
    "text": "Про посібник\nМатеріали навчального посібника підготовлені для читання курсів “Основи програмування на C#”, “Програмування на C#” та “Обєктно-орінтоване програмування” студентам спеціальностей комп’ютерні науки та економічна кібернетика Національного університету “Острозька академія”.\n\n\n\nПередмова\nМатеріли створені з метою компактного та зрозумілого викладення матеріалу з основ програмування на мові C#. Завдання та приклади орієнтовані на студентів, що мають середній рівень математичної підготовки і вміють розв’язувати задачі з алгебри, геометрії, логіки, а також курсів, що повязані із основами математичного моделювання (статистика, економетрика, економічна кібернетика, дослідження операцій тощо).\nВикладений матеріал не претендує на повноту у описі можливостей мови програмування C#, проте, на думку автора, може стати базою для написання нескладних програм або фундаментом для подальшого поглиблення знань та умінь.\nЗауваження, побажання та відгуки прошу надсилати на елетронну адресу yura@kleban.page. Також додаткові матеріали та приклади програм, що використовуються у посібнику можна завантажити на сайті автора: http://kleban.page.\n\n\n\nОпис навчальної дисципліни\nНавчальна дисципліна спрямована на практичне застосування популярної концепції об’єктно-орієнтованого програмування і мови програмування C#. У процесі вивчення курсу «Програмування на C#» студенти ознайомлюються із базовими поняттями алгоритмізації, структурами даних та основами об’єктно-орієнтовного програмування.\nМісце навчальної дисципліни у підготовці здобувачів: програмні результати дисципліни використовуються під час вивчення таких навчальних дисциплін: «Розробка ігрових додатків», «Об’єктно-орієнтоване програмування», «Технології колективної роботи над проектом». Закріплення на практиці здобутих програмних результатів відбувається під час проходження Навчальної практики з дисципліни «Програмування на C#».\n\n\n\nМета та завдання навчальної дисципліни\nМета навчальної дисципліни – формування у студентів теоретичних знань та практичних навичок використання алгоритмічного та об’єктно-орієнтованого програмування при розв’язанні задач на базі технології .NET та мови програмування C#.\nЗавдання навчальної дисципліни - розвинути та набути у здобувачів освіти такі компетентності:\nзагальні:\n\nЗК1 - здатність до абстрактного мислення, аналізу та синтезу, а саме виокремлення важливих властивостей об’єктів та їх опис засобами мови програмування;\nЗК2 - здатність застосувати знання у практичних ситуаціях, а саме використання навичок програмування для розв’язування обчислювальних задач, а також збору, зберігання, передачі інформації;\nЗК6 - здатність вчитися і оволодівати сучасними знаннями, а саме вміння самостійно опрацьовувати документацію з описом бібліотек, спеціальних програмних пакетів для подальшого застосування у розробці програм;\nЗК8 - здатність генерувати нові ідеї (креативність), а саме знаходити та покращувати існуючі підходи до розв’язання класичних та нових задач, що виникають під час написання програмного забезпечення;\nЗК9 - здатність працювати в команді, а саме спільна робота над проектами з використанням системи контролю версій git та інструментальних засобів управління проектною діяльністю (дошки, списки задач, bugtracker-и).\n\nспеціальні:\n\nСК10 - здатність застосовувати методології, технології та інструментальні засоби для управління процесами життєвого циклу інформаційних і програмних систем, продуктів і сервісів інформаційних технологій відповідно до вимог замовника, а саме визначати вимоги до програмного забезпечення та способи імплементації потрібних рішень у вигляді готових рішень;\nСК14 - здатність застосовувати методи та засоби забезпечення інформаційної безпеки, розробляти й експлуатувати спеціальне програмне забезпечення захисту інформаційних ресурсів об’єктів критичної інформаційної інфраструктури, а саме шифрування та кодування інформації, а також безпечна передача даних у мережі;\nСК18 - здатність використовувати технології та патерни програмування для вирішення найбільш розповсюджених прикладних задач, модифікувати існуючі патерни для вирішення конкретної задачі при створенні програмної системи, а саме під час використання технологій WPF, ASP.NET, Blazor, Xamarin.\n\n\n\n\nДотримання принципів доброчесності\nВикладач та слухач цього курсу, як очікується, повинні дотримуватися Кодексу академічної доброчесності університету:\n\nбудь-яка робота, подана здобувачем протягом курсу, має бути його власною роботою здобувача; не вдаватися до кроків, що можуть нечесно покращити Ваші результати чи погіршити/покращити результати інших здобувачів;\nякщо буде виявлено ознаки плагіату або іншої недобросовісної академічної поведінки, то студент буде позбавлений можливості отримати передбачені бали за завдання;\nне публікувати у відкритому доступі відповіді на запитання, що використовуються в рамках курсу для оцінювання знань здобувачів;\nпід час фінальних видів контролю необхідно працювати самостійно; не дозволяється говорити або обговорювати, а також не можна копіювати документи, використовувати електронні засоби отримання інформації.\n\nПорушення академічної доброчесності під час виконання контрольних завдань призведе до втрати балів або вживання заходів, які передбачені Кодексу академічної доброчесності НаУОА.\n\n\n\n\n\n\nМатеріали курсу створені з використанням ряду технологій та середовищ розробки:\n\nМова C# - це об’єктно-орієнтована мова програмування, розроблена компанією Microsoft у 2000 році як частина платформи .NET.\nQuarto Book - система для публікації наукових та технічних текстів з відкритим кодом (R/Python/Julia/Observable).\nGit/Github - система контролю версій та, відповідно, сервіс для організації зберігання коду, а також публікації статичних сторінок.\nRStudio Desktop - інтегроване середовище розробки (IDE) для мови R з відкритим кодом, що містить в собі редактор коду, консоль, планер, засоби візуалізації та можливості.\nVisual Studio Code - інтегроване середовище розробки (IDE) з відкритим кодом практично для усіх відомих технологій та мов програмування.\n\n\n\n\nБібілографічний опис bibtex:\n@book{yk-csharp,\n  author       = {Юрій Клебан},\n  title        = {Програмування на C#},\n  publisher    = {Zenodo},\n  year         = 2025,\n  doi          = {10.5281/zenodo.7251419},\n  url          = {https://doi.org/10.5281/zenodo.7251419}\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Загальна інформація</span>"
    ]
  },
  {
    "objectID": "lecture-1-01-categories.html",
    "href": "lecture-1-01-categories.html",
    "title": "1.1. Загальні категорії та поняття програмування",
    "section": "",
    "text": "Note\n\n\n\nПрезентація до заняття:\n\nThis is an embedded &lt;a target=\"_blank\" href=\"https://office.com\"&gt;Microsoft Office&lt;/a&gt; presentation, powered by &lt;a target=\"_blank\" href=\"https://office.com/webapps\"&gt;Office&lt;/a&gt;.\n\n\n\nПеред початком вивчення програмування варто розглянути та розібрати базові поняття та категорії. Дамо визначення понять: алгоритм, задача, програмування, мова програмування, програма, програмне забезпечення, розробка програмного забезпечення.\nПрограмування – розробка програм за допомогою мов програмування.\nМова програмування – це формальна система знаків, що призначена для написання програм, зрозуміла для виконавця (комп’ютера).\nПрограма (program, routine) — впорядкована послідовність команд (інструкцій) комп’ютера для розв’язання задачі.\nПрограмне забезпечення (software) — сукупність програм обробки даних та необхідних для їх експлуатації документів. Програми призначені для машинної реалізації завдань (Задач). Терміни завдання і застосування (програма) мають дуже широке вживання в контексті інформатики і програмного забезпечення.\nЗавдання або задача (problem, task) — проблема, що підлягає вирішенню.\nЗастосування або програма (application) — програмна реалізація на комп’ютері рішення задачі.\nРозробка програмного забезпечення (англ. software engineering, software development) — це рід діяльності (професія) і процес, спрямований на створення і підтримку працездатності, якості та надійності програмного забезпечення, використовуючи технології, методологію та практики з інформатики, управління проектами, математики, інженерії та інших сфер знань.\nАлгоритм (Algorithmi, від імені перського математика IX ст. аль-Хорезмі) — система правил виконання обчислювального процесу, що обов’язково приводить до розв’язання певного класу задач після скінченного числа операцій. При написанні комп’ютерних програм алгоритм описує логічну послідовність операцій. Для візуального зображення алгоритмів часто використовують блок-схеми. Засоби швидкої розробки додатків (RAD) дозволяють створити програмний продукт, що складається з ряду застосувань, що дозволяють користувачам вводити дані в таблиці або редагувати вже існуючі дані, аналізувати введені дані і представляти їх у більш зручному для сприйняття вигляді - графіків, зведених таблиць або звітів (у тому числі у вигляді “паперових” документів).",
    "crumbs": [
      "Тема 1. Вступ до курсу",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>1.1. Загальні категорії та поняття програмування</span>"
    ]
  },
  {
    "objectID": "lecture-1-02-history.html",
    "href": "lecture-1-02-history.html",
    "title": "1.2. Коротка історія мов програмування та виникнення C#",
    "section": "",
    "text": "1.2.1. Парадигми програмування\nУсе програмування прийнято поділяти на два основних види:\nДекларативне програмування — термін з двома різними значеннями. Згідно першому визначенню, програма «декларативна», якщо вона описує щось, а не як його створити. Наприклад, веб-сторінки на HTML декларативні, оскільки вони описують що повинна містити сторінка, а не як відображати сторінку на екрані. Цей підхід відрізняється від мов імперативного програмування, що вимагають від програміста вказувати алгоритм для виконання.\nЗгідно другому визначенню, програма «декларативна», якщо вона написана на виключно функціональній, логічній або константній мові програмування.\nІмперативне програмування — парадигма програмування, згідно з якою описується процес отримання результатів як послідовність інструкцій зміни стану програми. Подібно до того, як з допомогою наказового способу в мовознавстві перелічується послідовність дій, що необхідно виконати, імперативні програми є послідовністю операцій комп’ютеру для виконання.\nПарадигма програмування — це спосіб мислення розробника програми. Мова програмування може підтримувати або не підтримувати ту чи іншу парадигму. В першому випадку застосування парадигми стає зручним, тобто простим, безпечним і ефективним. Ми розглянемо три основних наказових парадигми — процедурне, об’єктне (модульне) і об’єктно-орієнтовне (ієрархічне) програмування.",
    "crumbs": [
      "Тема 1. Вступ до курсу",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>1.2. Коротка історія мов програмування та виникнення C#</span>"
    ]
  },
  {
    "objectID": "lecture-1-02-history.html#процедурне-програмування",
    "href": "lecture-1-02-history.html#процедурне-програмування",
    "title": "1.2. Коротка історія мов програмування та виникнення C#",
    "section": "1.2.2. Процедурне програмування",
    "text": "1.2.2. Процедурне програмування\nПроцедурне програмування подає програму у вигляді набору алгоритмів, для оформлення яких можуть застосовуватися іменовані програмні блоки — процедури і функції. В останньому випадку передбачається наявність механізмів передачі параметрів і поверненні результату.\nСпочатку процедурне програмування користувалося довільними засобами керування, в тому числі, переходом за міткою — одним з найбільш вживаних операторів керування в Фортрані.\nДо мов процедурного програмування відносяться Fortran, Cobol, Pascal, Basic, та інші.\nВ 1968 році голландський вчений Е. Дейкстра вперше звернув увагу на проблеми, що виникають у програмах з неконтрольованими переходами, в 1970 році проголосив новий напрямок, який він назвав структур(ова)ним програмуванням.\nСтруктурне програмування — це варіант процедурного, що вживає три типи структур керування: послідовне виконання дій, розгалуження і цикл. Не дивно, що Фортран не підтримував цю парадигму — в наборі його засобів не було циклів за умовами. Починаючи з Алголу, а особливо в Паскалі, цикли стають основним засобом організації обчислень в програмі.\nАвтор Паскалю, професор Н. Вірт, відібрав до створюваної ним мови програмування лише прості в поясненні і легкі в реалізації конструкції. Завдяки сильній типізації програми в Паскалі відзначаються високою надійністю, вони мобільні завдяки закладеній в них концепції Паскаль-машини, їх легко читати і розуміти завдяки дисципліні програмування, продиктованої вжитою парадигмою.\nАле разом з цим застосування Паскалю гальмувалося саме складністю виходу за межі віртуальної машини, потребою ефективного використання наявної апаратури. Головним критерієм, вжитим Б.Керніганом і Д.Річі до створеної ними мови С, стала саме гнучкість використання особливостей конкретної апаратури і ефективність виконання програм.",
    "crumbs": [
      "Тема 1. Вступ до курсу",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>1.2. Коротка історія мов програмування та виникнення C#</span>"
    ]
  }
]