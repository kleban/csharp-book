---
title: Тема 5. Розгалуження та цикли
keywords: C#, розгалуження, умовні оператори, if, else, switch, тернарний оператор, цикли, for, while, do-while, foreach, оператор break, continue
description: "Лекція охоплює основи розгалужень і циклів у C#. Студенти дізнаються про умовні оператори if-else та switch, а також про використання тернарного оператора. У другій частині лекції розглядаються цикли for, while, do-while і foreach, їх призначення та відмінності. Також пояснюється використання операторів break і continue для керування потоком виконання програм. Лекція супроводжується прикладами коду та практичними завданнями."
author: "Юрій Клебан"
date: "02/02/2025"
date-format: short
---

*Лекція охоплює основи розгалужень і циклів у C#. Студенти дізнаються про умовні оператори if-else та switch, а також про використання тернарного оператора. У другій частині лекції розглядаються цикли for, while, do-while і foreach, їх призначення та відмінності. Також пояснюється використання операторів break і continue для керування потоком виконання програм. Лекція супроводжується прикладами коду та практичними завданнями.*

---


## 5.1.Оператори розгалуження 

У C# для реалізації розгалужень коду використовуються
спеціальні оператори: `if-else`, `switch`.

### 5.1.1. Оператор `if-else` 

Якщо є потреба перевірити у коді програми виконання якоїсь
умови та за її результатами перейти до одного із блоків програми
зазвичай використовують оператор `if-else`. Загальний вигляд формату
використання оператора `if-else` зображений у лістингу 4.1.

{{< fa code >}} _Лістинг 5.1.Формат використання оператора `if-else`_
```csharp
  if (умова)
  {
    //інструкція
  }
  else
  {
    //інструкція
  }
```

Вираз «умова» завжди повинен повертати результат у вигляді елемента логічного типу. Тобто, «умова» може бути або **`true`**, або **`false`**.

Якщо «умова» рівна **`true`**, то виконається інструкція (або код) записана у дужках після **`if`**. Якщо ж «умова» рівна **`false`**, то виконається інструкція записана у дужках після **`else`**.

{{% callout info %}}
Якщо після `if` або `else` тільки одна інструкція (можна ототожнити з один рядком коду), то «фігурні» дужки `{}` не є обов’язковими.
{{% / callout %}}

Розглянемо приклад: написати програму, що визначає парність/непарність числа. Тобто, користувач вводить число, а програма показує на консоль у текстовому вигляді: `«парне»` або `«непарне»` (лістинг 5.2).

{{< fa code >}} _Лістинг 5.2. Перевірка числа на парність_
```csharp
  int a = int.Parse(Console.ReadLine());
  if(a % 2 == 0)
    Console.WriteLine("парне");
  else
    Console.WriteLine("непарне");
```

Конструкції `if-else` можуть вкладеними одна в одну без обмежень
по глибині (лістинг 5.3). Проте дуже глибокої вкладеності варто уникати,
адже це ускладнює читання та розуміння коду програми.

{{% callout info %}}
`if` є обов’язковим і повинно існувати у всіх подібних
конструкціях, у той же час `else` – необов’язковий.
{{% / callout %}}

{{< fa code >}} _Лістинг 5.3. Приклад використання вкладених операторів if-else_
```csharp
  if (умова1)
  {
    if (умова2)
    {
      //інструкція
    }
  }
```

Також конструкція `if-else` може мати структуру дерева із багатьма
розгалуженнями. Така структура зазвичай записується як` if-else-if`
(лістинг 5.4).

{{< fa code >}} _Лістинг 5.4. Формат запису `if-else-if`_
```csharp
  if (умова)
  {/*код*/}
  else if (умова)
      {/*код*/}
      else if (умова)
          {/*код*/}
          else {/*код*/}
```

Вирази обчислюються зверху-вниз. Якщо один із виразів (`«умова»`) отримає істинний результат, то програмний код, пов'язаний із цією гілкою розгалуження виконається, а всі інші гілки будуть 
пропущені. Якщо ж не виконається жодна з умов, то буде запущено код
всередині останньої інструкції `else` (у цьому випадку `else` теж не
обов’язковий).

---

### 5.1.2. Оператор `switch` {#chapter512}

Наступною інструкцією для реалізації розгалуження, або
точніше вибору значення є `switch`. `Switch` забезпечує багатонаправлене
розгалуження і дозволяє вибрати один із варіантів із даної множини
альтернатив. Ця конструкція працює наступним чином:

1. Значення виразу послідовно порівнюється з константами із заданого списку.
2. При виявленні збігу для однієї з умов порівняння виконується послідовність інструкцій, пов'язана з цією умовою.

Оператор `switch` приймає значення цілочисельного типу (наприклад, `char`, `byte`, `int`, `long` тощо) або тип `string`. Типи даних, що представляють числа з дробовою частиною не можуть бути використані даному випадку.

`Switch` складається з набору `case` конструкцій. Кожна конструкція `case` представлена у вигляді літерала такого ж типу даних як і значення, що приймає `switch`. Усі `case` конструкції у межах одного `switch` можуть мати тільки унікальні константи. Формат оголошення продемонстровано у лістингу 4.5.

{{< fa code >}} _Лістинг 5.5. Формат оголошення `switch`_
```csharp
  switch (значення)
  {
    case костанта1:
      //інструкція
      break;
    case костанта2:
      //інструкція;
      break;
    ...
    default:
      //інструкція
      break;
}
```

`Case`-конструкції перевіряються у порядку розміщення. Вкінці
кожного `case` повинно бути ключове слово `break`, що означає вихід із
`switch`.

Також у `switch` використовують конструкцію `default`, яка не є
обов’язковою і виконується лише у випадку, якщо жодна із `case`-конструкцій так і не відпрацювала.

Для розуміння принципів роботи `switch` розглянемо приклад. Написати програму, яка у залежності від введеної цифри виводить на
консоль пору року: 1 — «Зима», 2 — «Весна», 3 — «Літо», 4 — «Осінь»,
інше число — «Введіть число із діапазону [1;4]» (Лістинг 5.6).

{{< fa code >}} _Лістинг 5.6. Розв’язання задачі «Пори року» з використанням `switch`_
```csharp
  Console.Write("Введіть номер пори року [1;4]:\t");
  int res = int.Parse(Console.ReadLine());
  
  switch (res)
  {
    case 1:
      Console.WriteLine("Зима");
      break;
    case 2:
      Console.WriteLine("Весна");
      break;
   case 3:
     Console.WriteLine("Літо");
     break;
   case 4:
     Console.WriteLine("Зима");
     break;
   default:
     Console.WriteLine("Введіть число від 1 до 4");
     break;
  }
```

{{< icon name="play text-muted" pack="fas" >}} Результат виконання:
```
  Введіть номер пори року [1;4]: 2
  Весна
```

У випадку, якщо потрібно, щоб одна і та ж інструкція виконувалася для кількох різних значень констант код `switch` може мати
вигляд як на лістингу 4.7.

{{< fa code >}} _Лістинг 5.7. Приклад використання `switch`_
```csharp
  Console.Write("Введіть оцінку [1-12]:\t");
  int res = int.Parse(Console.ReadLine());
  
  switch (res)
  {
     case 1:
     case 2:
     case 3:
       Console.WriteLine("Низький рівень");
       break;
     ...
     case 10:
     case 11:
     case 12:
       Console.WriteLine("Високий рівень");
       break;
  }
```

У прикладі показано виведення шкільких оцінок відповідно до 12-ти бальної системи по рівнях.

---

### 4.1.3. Тернарний оператор {#chapter513}

Інколи для простої заміни оператора `if-else` використовують тернарний оператор. Тернарний оператор отримав свою назву від
кількості задіяних виразів (3) і позначається символами `?:`. Загальний
формат запису тернарного оператора має вигляд:

```
Вираз_1 ? Вираз_2 : Вираз_3
```
де `Вираз_1` — логічний вираз, за рузультатом обчислення якого визначається наступна дія, `Вираз_2` — значення, що повертається, якщо результатом `Виразу_1` є `true`, `Вираз_3` — значення, що повертається, якщо результатом `Виразу_1` є `false`.

Для демонстрації роботи тернарного оператора спробуємо розвязати задачу визначення модуля цілого числа. Можна було б для також задачі скористатися оператором `if-else`, проте тернарний оператор
спрощує синтаксис запису такого коду (лістинг 5.8).

{{< fa code >}} _Лістинг 5.8. Приклад використання тернарного оператора: визначення модуля числа_
```csharp
  Console.Write("Введіть ціле число:\t");
  int a = Convert.ToInt32(Console.ReadLine());
  int absval = (a > 0) ? a : -a;
  Console.WriteLine("ABS: {0}", absval);
```

{{% callout info %}}
Увага! Для знаходження модуля числа у C# існує спеціальний
метод `Math.Abs(значення)`.
{{% / callout %}}

---

## 4.2. Використання циклів під час написання програм {#chapter52}

Для виконання повторюваних операцій у програмуванні
використовуються цикли. Цикл – це спеціальна конструкція мови
програмування для багаторазового виконання набору інструкцій.
У C# існують 4 типи циклів: `for`, `while`, `do-while`, `foreach`.

### 4.2.1. Цикл `for` {#chapter521}

Загальний синтаксис оголошення циклу `for` має вигляд як на
лістингу 4.9. Блок «ініціалізація» використовується для оголошення
керуючих змінних циклу. У другому блоці оголошення циклу
перевіряється умова можливості продовження виконання циклу. Якщо
«умова» повератає `false`, то виконання циклу завершується. Блок
«інструкції» довляє виконувати дії над змінними програми. Найчастіше
у цьому блоці відбуваються дії над керуючими змінними.

{{< fa code >}} _Лістинг 5.9. Синтаксис оголошення циклу `for`_
```csharp
  for(ініціалізація; умова; інструкції)
  {
    //код;
  }
```

Усі три блоки «ініціалізація», «умова» та «інструкції» не є
обов’язковим у оголошенні циклу `for`, проте розділювачі потрібно
записати обов’язково (Лістинг 5.10).

{{< fa code >}} _Лістинг 5.10. Вічний цикл `for`_
```csharp
  for(;;)
  {
    //код;
  }
```

Розглянемо приклад задачі: знайти суму усіх чисел від 1 до 10-ти
включно (Лістинг 5.11).

{{< fa code >}} _Лістинг 5.11. Приклад використання циклу `for`_
```csharp
  int sum = 0;
  for (int i = 1; i <= 10; ++i)
    sum += i;
```

{{% callout info %}}
Якщо після `for` тільки одна інструкція, то «фігурні» дужки `{}` не є обов’язковими.
{{% / callout %}}

Для деталізації розглянемо ще один приклад програми і
розберемо його (Лістинг 5.12).

{{< fa code >}} _Лістинг 5.12. Приклад використання циклу `for`_
```csharp
  int sum = 0;
  for (int i = 0, j = 1; sum < 20; i++, j += 2)
  {
      sum += i + j;
  }
```

Проаналізуємо, як повинна відпрацювати дана програма та які
значення будуть мати змінні на кожній ітерації циклу.

- [x] `Початок: i = 0; j = 1; sum = 0.`
- [x] `1-ша ітерація: i = 1; j = 3; sum = 5.`
- [x] `2-га ітерація: i = 2; j = 5; sum = 12.`
- [x] `3-тя ітерація: i = 3; j = 7; sum = 22`

Також у циклах можуть використовуватися ключові слова `break`
та `continue`.

Ключове слово `break` зупиняє виконання циклу і переходить до
виконання наступного після циклу коду. Ключове слово `continue`
переводить цикл на нову ітерацію.

На прикладі лістингу 4.13. розглянемо використання цих
операторів. Програма працює наступним чином: цикл послідовно
проходить по усіх числах та виводить їх на екран; якщо число кратне 3-м, то цикл переходить на нову ітерацію; якщо число кратне 7-ми, то цикл закінчується.

{{< fa code >}} _Лістинг 5.13. Приклад використання операторів `break` та `continue` у циклах_
```csharp
  for (int i = 0; i < 10; ++i)
  {
     if (i%3 == 0)
        continue;
     
     Console.Write(i + " ");
     
     if(i%7==0)
        break;
  }
```

{{< icon name="play text-muted" pack="fas" >}} Результат виконання:
```output
  1 2 4 5 7
```

### 4.2.2.Цикли `while` та `do-while` {#chapter522}

Цикл while у мінімально модифікованому вигляді є частиною
практично усіх мов програмування. Тіло циклу виконується до тих пір,
поки залишається істинною умова `while`. Синтаксис оголошення має
вигляд:

```csharp
  while (умова) { 
      //інструкції 
  }
```

Цикл `while` може працювати з передумовою та післяумовою. Цикл з передумовою спочатку перевіряє умову, а після цього виконує або не виконує ітерацію циклу. Цикл з післяумовою спочатку виконується
(одна ітерація), а потім тільки перевіряється умова. Таким чином можна
зробити висновок, що цикл з післяумовою виконається мінімум 1 раз.
Синтаксис огололшення циклу `while` з післяумовою:
```csharp
  do 
  { 
      //інструкції 
  } while (умова);
```

Для порівняння циклів `while` розглянемо лістинги 4.14 та 4.15. У
першому випадку не буде виведено на консоль нічого, у другому буде
виведено «5».

{{< fa code >}} _Лістинг 5.14. Приклад використання циклу `while` з передумовою_
```csharp
  int x = 5;
  while (x < 5)
  {
       Console.Write(x + " ");
  }
```

{{< fa code >}} _Лістинг 5.15. Приклад використання циклу `while` з післяумовою_
```csharp
  int x = 5;
  do
  {
      Console.Write(x + " ");
  } while (x < 5);
```
Робота з циклом `foreach` буде розглянута у розділі 6 разом із вивченням масивів.

---

<span style="float:right">
{{< icon name="code fa-2x text-success" pack="fas" >}}
</span>

## Приклади розв'язання задач {#chapter5samples}

**Приклад 4.1.** Написати програму, яка генерує і виводить на консоль 10 випадкових чисел із діапазону від 10 до 50.

{{< fa code >}} Розв'язок:
```csharp
  Random r = new Random();
  for (int i = 0; i < 10; ++i)
  {
      Console.Write(r.Next(10,50) + "\t");
  }
```

**Приклад 4.2.** Написати програму, яка серед 5-ти введених чисел
знаходить найменше. Програма працює наступним чином: користувач
вводить за запитом системи числа, а потім на консоль виводиться
найменше з них.

{{< fa code >}} Розв'язок:
```csharp
  int min = int.MaxValue;
  for (int i = 0; i < 5; ++i)
  {
     Console.Write("Введіть {0} число:\t", i + 1);
     int num = int.Parse(Console.ReadLine());
     min = num < min ? num : min;
  }
  Console.WriteLine("Найменше число:\t{0}",min);
```

**Приклад 5.3.** Написати програму, що моделює роботу навігації.
Програма повинна пропонувати користувачу вибір дії шляхом введення
символа з клавіатури. Доступними діями є:
  - [x] `Hello` - виводить на консоль текст «`Hello, user!`»
  - [x] `Time` - виводить години, хвилини та секунди на поточному ПК
  - [x] `Exit` - завершує роботу програми.

{{< fa code >}} Розв'язок:
```csharp
  while (true)
  {
     Console.WriteLine("\nMake a choice:");
     Console.Write(" [H]ello\n [T]ime\n E[x]it\n\t\t:>");
     string res = Console.ReadLine();
     
     switch (res)
     {
       case "H":
       case "h":
          Console.WriteLine("Hello, user!");
          break;
       case "T":
       case "t":
         Console.WriteLine(
         DateTime.Now.ToString("HH:mm:ss",
         new CultureInfo("uk")));
         break;
       case "X":
       case "x":
         return;
         break;
       default:
         Console.WriteLine("Wrong choice");
         break;
     }
  }
```


---


<span style="float:right">
{{< icon name="list-alt fa-2x text-success" pack="fas" >}}
</span>

## Задачі {#chapter5tasks}

#### Задача 4.1.{#chapter5task1}
Написати програму, що знаходить добуток чисел у вказаному користувачем діапазоні.

---

#### Задача 4.2. {#chapter5task2}
Дано цілі додатні числа $i$ та $k$ . Реалізувати функцію, що обчислює значення виразу:

$$
z = i - k, при i кратному k
$$
$$z = k - i, при k кратному i$$
$$z = k + i, при{ }всіх{ }інших{ }умовах$$

---

#### Задача 4.3. {#chapter5task3}

Обчислити значення виразу $y=\frac{(x + 5)^3}{\sqrt{x + 1}}$ для усіх $x$ з діапазону $[10; 100]$ кратних $7$-ми. На консоль вивести результат у вигляді, наприклад:
```
  x   y
  7   125.21
  14  100.41
  ...
```

_Примітка. Вивести на консоль не більше двох знаків після розділювача дробової та цілої частини (крапки) для значень $y$._

---

#### Задача 4.4
Написати програму, яка генерує і виводить на консоль $8$ випадкових чисел із діапазону від $1 до 10$. Якщо згенероване число є непарним, то його значення замінюється на $0$ і виводиться у фигляді $0(непарне число)$.

Наприклад, виведення може мати вигляд:
```
2 4 0(7) 0(1) 8 4 2 6 0(9) 0(1) 6
```

---

#### Задача 4.5. {#chapter5task4}
Обчислити значення виразу $y=\frac{cos(x^2 + 5)^3}{\sqrt{x - ln(x)}}$ для усіх $x$ з діапазону $[100; 200]$ кратних $10$-ти. На консоль вивести результат у вигляді, наприклад:
```
  x     y
  100    0.8710
  110   -0.0247
  ...
```

_Примітка. Вивести на консоль не більше чотирьох знаків після розділювача дробової та цілої частини (крапки) для значень $y$. Також зверніть увагу на виведення чисел з від'ємним та додатними значеннями._

---

#### Задача 4.6. {#chapter5task5}

Написати програму, що виводить на консоль таблицю множення на вказане користувачем число. Наприклад, якщо користувач ввів число $5$, то результат виконання програми матиме вигляд:

```
  5 x 1 = 5
  5 x 2 = 10
  ...
  // і так далі...
  ...
  5 x 10 = 50
```

---


#### Задача 4.7. {#chapter5task6}

Відомо, що $1 дюйм$ рівний $2.54 см$. Розробити додаток, що
переводить дюйми в сантиметри і навпаки. Діалог з користувачем
реалізувати через систему меню.

---

#### Задача 4.8. {#chapter5task7}

Написати програму, що знаходить суму усіх чисел кратних $7$ у діапазоні від $0$ до $100$.

---

#### Задача 4.9. {#chapter5task8} 

Написати програму, що обчислює суму цифр введено числа.

---

#### Задача 4.10. {#chapter5task9}

Написати програму, що виводить на екран цифри введеного числа у зворотному порядку. Наприклад, $248641 > 146842$.

---

#### Задача 4.11. {#chapter5task10}

Написати програму, дозволяє вивести на консоль в порядку спадання непарні числа із діапазону $[5;90]$, кратні $3$ та не кратні $5$. одночасно.

---

#### Задача 4.12. {#chapter5task11}

Розробити програму, що працює як найпростіший калькулятор, який виконує арифметичні дії `+`, `-`, `*`, `/` (скористатися оператором `switch`).

Пояснення. Програма повинна працювати у режимі постійного діалогу з користувачем.

```
--- МЕНЮ ---
[+] - Додати
[-] - Відняти
[*] - Множити
[/] - Ділити
[0] - Вийти з програми

Ваш вибір :> *

Введіть число 1: 4
Введіть число 2: 5

Резльутат: 20

// повторне виведення меню
```

---

#### Задача 4.13. {#chapter5task12}

Знайти найбільший спільний дільник двох натуральних чисел,  використавши [алгоритм Евкліда](https://uk.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%95%D0%B2%D0%BA%D0%BB%D1%96%D0%B4%D0%B0). `Алгоритм Евкліда полягає в наступному: від більшого числа віднімається менше до тих пір, поки вони не стануть рівними; отримане в результаті число і буде найбільшим спільним дільником.`

---

#### Задача 4.14. {#chapter5task13}

Написати програму, яка виводить на екран лінію з символів. Число символів та сам символ, і яка буде лінія вертикальна, або горизонтальна - вказує користувач.

---

#### Задача 4.15. {#chapter5task14}

Написати програму, яка виводить на консоль фігури, зображені нижче. _Примітка. Розміри фігур вказує користувач._

Фігура 1.

```
****************
****************
****************
****************
****************
```
Фігура 2.

```
****************
*              *
*              *
*              *
****************
```

Фігура 3.

```
*****
****
***
**
*
```

---

#### Задача 4.16. {#chapter5task15}

Написати програму, що генерує та виводить на консоль 5 випадкових чисел, кратних `7`-ми та некратних `5`-ти одночасно з діапазону $[50; 150]$.

---

#### Задача 4.17. {#chapter5task16}

Написати програму, що передбачає вгадування користувачем числа, загаданого комп'ютером. Після кожної спроби вгадати число комп'ютер повідомляє чи загадане значення більше (`>`) чи менше (`<`) від запропонованого користувачем. Після вгадування на екран виводиться кількість спроб.

Припустимо, що компютер має право загадувати число у діапазоні $[1; 10000)$.

_Примітка. Потрібне вміння генерувати випадкові числа за допомогою класу `Random`._

---

#### Задача 4.18. {#chapter5task17}

Згенерувати 10 випадкових чисел у діапазоні $[10, 100)$. Вивести числа на консоль.


---


::: callout-warning
Дорогі друзі, якщо Ви помітили, що для написання матеріалів використані джерела, які я не вказав - прошу надіслати мені інформацію на пошту. Дякую.
:::