---
title: Тема 2. Підтема 4. Як відлагоджувати код у C#
keywords: C#, Visual Studio, Debugging, Відлагодження, Точки зупину, Debug.WriteLine, Помилки, Крокування
description: "Ця лекція описує основи відлагодження коду у C# за допомогою Visual Studio. Розглянуто ключові інструменти, такі як точки зупину, перегляд змінних, крокування та використання Debug.WriteLine(). Наведено практичні завдання для виявлення та виправлення помилок у коді."
author: "Юрій Клебан"
date: "02/03/2025"
date-format: short
---


## 2.4.1. Вступ
Відлагодження (debugging) – це процес виявлення та виправлення помилок у програмному коді. У C# для цього найчастіше використовується середовище розробки **Visual Studio**, яке надає потужні інструменти для налагодження.

## 2.4.2 Основні методи відлагодження
### 2.4.2.1 Використання точки зупину (Breakpoint)

Точки зупину дозволяють призупиняти виконання програми в певному місці для аналізу стану змінних.

**Як встановити точку зупину:**
1. Відкрити Visual Studio.
2. Відкрити файл з кодом.
3. Клацнути в лівому полі біля потрібного рядка або натиснути `F9`.
4. Запустити відлагодження `F5`.

### 2.4.2.2 Перегляд значень змінних
При зупинці виконання можна навести курсор на змінну або використати вкладку **Locals/Watch** для перегляду її значень.

### 2.4.2.3 Використання "Крокування" (Step Over, Step Into, Step Out)
- `F10` – **Step Over** (виконати поточний рядок, не заходячи у функцію).
- `F11` – **Step Into** (увійти в метод, що викликається).
- `Shift + F11` – **Step Out** (вийти з методу).

### 2.4.2.4 Використання `Debug.WriteLine()`
Метод `Debug.WriteLine()` дозволяє виводити інформацію у вікно **Output**.

```csharp
using System.Diagnostics;

Debug.WriteLine("Це повідомлення буде видно тільки у відладці");
```

## 2.5. Завдання для практики

### Завдання 1: Виправлення помилки `NullReferenceException`

#### Код із помилкою:
```csharp
string message = null;
Console.WriteLine(message.Length);

```
#### Інструкція:
1. Вставте точку зупину перед `Console.WriteLine()`.
2. Запустіть відлагодження (`F5`).
3. Перегляньте значення змінної `message`.
4. Виправте код, додавши перевірку на `null`.

```csharp
if (message != null)
{
    Console.WriteLine(message.Length);
}
else
{
    Console.WriteLine("Змінна має значення null");
}
```

### Завдання 2: Виявлення логічної помилки
#### Код із помилкою:
```csharp
int a = 5;
int b = 0;
int result = a / b;
Console.WriteLine(result);
```
#### Інструкція:
1. Встановіть точку зупину перед виконанням операції `a / b`.
2. Використайте вкладку **Locals** для перегляду змінних.
3. Виправте помилку, додавши перевірку:

```csharp
if (b != 0)
{
    int result = a / b;
    Console.WriteLine(result);
}
else
{
    Console.WriteLine("Ділення на нуль неможливе");
}
```

## 2.5. Висновки
Відлагодження у C# – це важлива навичка, що дозволяє швидко знаходити та виправляти помилки. Використовуйте точки зупину, крокування та `Debug.WriteLine()` для ефективного аналізу програмного коду.
