
## 2.2. Побудова алгоритмів з використанням блок-схем {#chapter22}

Для зображення алгоритмів використовуватимемо блок-схеми, що формуються з типових блоків:

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-algorithm-blocks-blocks.svg" title="Рис. 2.2. Типові блоки для формування блок-схем алгоритмів." >}}

{{% callout note %}} Усі блок-схеми створено у *draw.io*.<br> Файли можна знайти [у github репозиторії курсу](https://github.com/kleban/csharp-basics-public/blob/master/diagrams). {{% /callout %}}

У теорії алгоритмів доведено, що будь-який, скільки завгодно складний алгоритм може бути складений з трьох основних алгоритмічних структур: лінійної, розгалуження і циклу, показаних, відповідно на `рис. 2.3`.

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-algorithm-blocks-structures.svg" title="Рис. 2.3. Основні алгоритмічні структури" >}}

Лінійна структура передбачає послідовне виконання дій, без їх повторення або пропуску деяких дій. Зазвичай програмісти прагнуть до того, аби алгоритм мав лінійну структуру.

Структура "розгалуження" передбачає виконання однієї з двох груп дій залежно від виконання умови у блоці розгалуження. На рис. 3 знаком "+" показано виконання умови, а знаком "-" - його невиконання. Часто використовується неповна команда розгалуження, коли один з блоків дії відсутній.

Структура "цикл" має декілька різновидів. На рис. 3 показаний цикл типу "доки" (`while`) з передумовою. Дії всередині цього циклу повторюються доки виконується умова у блоці розгалуження, причому спочатку перевіряється умова, а потім виконується дія. Досить часто використовуються інші типи циклу, показані на `рис. 2.4`.

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-algorithm-blocks-loops.svg" title="Рис. 2.4. Зображення циклів за допомогою блок-схем" >}}

У циклі з після умовою перевірка умови виходу з циклу виконується після чергової дії. Цикл "для (`for`)" є модифікацією циклу "доки (`while`)" для ситуації, коли заздалегідь відома кількість повторень деяких дій. Запис у блоці заголовка циклу на рис.3 показує приклад опису заголовка циклу, в якому дії повторюються стільки раз, скільки цілих значень набуває параметра циклу i від свого початкового значення 1 до кінцевого N з кроком 1. Зазвичай крок не вказується, якщо він дорівнює 1.

Тепер запишемо алгоритм розв’язання задачі 1 у графічному вигляді.

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task1.svg" title="Рис. 2.5. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №1" >}}

Для закріплення знань по лінійних структурах та розгалуженнях побудуємо графічне відображення алгоритмів для кількох задач.

------------------------------------------------------------------------

{{< icon name="question-circle text-warning" pack="far" >}} **Задача 2.** Побудувати блок-схему алгоритму перевірки введеного числа на невід’ємність.

{{< icon name="check-circle text-success" pack="far" >}} **Розвязання задачі графічним способом:**

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task2.svg" title="Рис. 2.6. Блок-схема алгоритму знаходження коренів квадратного рівняння до задачі №2" >}}

------------------------------------------------------------------------

{{< icon name="question-circle text-warning" pack="far" >}} **Задача 3.** Побудувати блок-схему алгоритму зходження периметра та площі трикутника за формулою Герона.

{{< icon name="check-circle text-success" pack="far" >}} **Розвязання задачі графічним способом:**

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task3.svg" title="Рис. 2.7. Блок-схема алгоритму до задачі №3" >}}

------------------------------------------------------------------------

{{< icon name="question-circle text-warning" pack="far" >}} **Задача 4.** Побудувати блок-схему алгоритму порівняння двох чисел.

{{< icon name="check-circle text-success" pack="far" >}} **Розвязання задачі графічним способом:**

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task4.svg" title="Рис. 2.8. Блок-схема до задачі №4" >}}

------------------------------------------------------------------------

Для закріплення знань по циклічних структурах побудуємо графічне відображення алгоритмів для кількох задач.

{{< icon name="question-circle text-warning" pack="far" >}} **Задача 5.** Побудувати блок-схему алгоритму знаходження суми елементів у масиву.

{{< icon name="info-circle text-primary" pack="fas" >}} Введемо позначення: \$ n \$ – кількість елементів масиву, \$ sum \$ – змінна, що визначає суму, \$ x_i \$ – \$ і \$-й елемент масиву.

{{< icon name="check-circle text-success" pack="far" >}} **Розвязання задачі графічним способом:**

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task5.svg" title="Рис. 2.9. Блок-схема до задачі №5" >}}

------------------------------------------------------------------------

{{< icon name="question-circle text-warning" pack="far" >}} **Задача 6.** Побудувати блок-схему алгоритму знаходження середнього значення елементів масиву.

{{< icon name="info-circle text-primary" pack="fas" >}} Ця задача відрізнється від попередньої лише появою нової змінної \$ avg \$ – середнє значення.

{{< icon name="check-circle text-success" pack="far" >}} **Розвязання задачі графічним способом:**

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task6.svg" title="Рис. 2.10. Блок-схема до задачі №6" >}}

------------------------------------------------------------------------

{{< icon name="question-circle text-warning" pack="far" >}} **Задача 7.** Побудувати блок-схему алгоритму знаходження максимального елемента у масиві.

{{< icon name="info-circle text-primary" pack="fas" >}} Введемо позначення: \$ max \$ – максимальний елемент, \$ n \$ - кількість елементів у масиві, \$ x_i \$ – \$ і \$-й елемент масиву. Припускаємо що масив уже заповнений і наперед відомо кількість елементів у масиві.

{{< icon name="check-circle text-success" pack="far" >}} **Розвязання задачі графічним способом:**

{{< figure src="/uploads/courses/csharp-basics/svg/lecture-2-tasks-task7.svg" title="Рис. 2.11. Блок-схема до задачі №7" >}}

------------------------------------------------------------------------

## 2.3. Ствоерення блок-схем з використанням Diagramm Designer {#chapter23}

**Diagramm Designer** - програмне забезпечення для побудови блок-схем, UML-діаграм, та інших зображень на основі векторної графіки. [{{< icon name="download" pack="fas" >}} Завантажити актуальну версію DiagramDesigner можна тут](https://logicnet.dk/DiagramDesigner/).

Перелік базових функцій Diagramm Designer:

-   Налаштовувана палітра шаблонів.
-   Перевірка правопису.
-   Імпорт / експорт зображень `WMF`, `EMF`, `BMP`, `JPEG`, `PNG`, `MNG`, `ICO`, `GIF` та `PCX`.
-   Переглядач слайд-шоу.
-   Зручний графічний редактор для відображення математичних виразів.
-   Калькулятор для розв'язання рівнянь.
-   Інтеграція з `MeeSoft Image Analyzer` для редагування растрових зображень.
-   Мінімізація розміру файлів.

Розглянемо графічний інтерфейс продукту:

{{< figure src="/uploads/courses/csharp-basics/lecture2/diagramm_designer_1.png" title="Рис. 2.12. Головне вікно програми Diagramm Designer 1.23" >}}

Для створення діаграм використовуєть технологія `Drag&Drop`, тобто елементи можна перетягувати на робочу область. Приклад створення діаграми можна переглянути на відео (у онлайн версії лекції).

Документ `DiagrammDesigner` може мати кілька сторінок, переключення між сторінками за допомогою меню `Diagram` - `Rearrange pages` (рис. 2.13).

{{< figure src="/uploads/courses/csharp-basics/lecture2/diagramm_designer_2.png" title="Рис. 2.13. Вибір сторінки у програмі Diagramm Designer" >}}

Для форматування тексту у межах графічних блоків (фігур) використовують наступні теги:

{{< figure src="/uploads/courses/csharp-basics/lecture2/diagramm_designer_3.png" title="Рис. 2.14. Редагування тексту у блоці Diagramm Designer." >}}

<center class="simple-table">

*Таблиця 2.1. Теги для форматування тексту у графічних блоках DiagrammDesigner*

| Код        | Стиль                     |
|------------|---------------------------|
| `\B…\b`    | Напівжирний               |
| `\U…\u`    | Підкреслений              |
| `\I…\i`    | Курсив                    |
| `\O…\o`    | Закреслений               |
| `\\`       | \\                        |
| `\H…\h`    | Припіднятий до верху      |
| `\S…\s`    | Символьний шрифт          |
| `\p`       | Номер сторінки            |
| `\L…\l`    | Опущений до низу          |
| `\C######` | Колір у HTML              |
| `\P`       | Загловок сторінки         |
| `\c`       | Кількість сторінок        |
| `\_`       | Горизонтальний розділювач |
| `\n`       | Новий рядок               |
| `\N`       | Підказка                  |

*Таблиця 2.2. Приклади форматування тексту у графічних блоках DiagrammDesigner*

| Код з тегами                 | Текст                                      |
|--------------------------------------|----------------------------------|
| `\B\ID=b\H2\h-4ac`           | \$ D=b\^2-4ac \$                           |
| Вводимо значення `\Ba, b, c` | Вводимо значення \$ a \$, \$ b \$, \$ c \$ |
| `\ID > 0`                    | \$ D \> 0 \$                               |
| Вводимо `\B\Ix\Li\i`         | Вводимо \$ x_i \$                          |

</center>

З іншими можливостями програмного подукту Diagramm Designer можна ознайомитися використовуючи вбудовану довідку програми.

{{% callout warning %}} Підтримка даного розділу лекції у майбутньому не планується і його варто використовувати швидше для ознайомлення та розширення кругозору слухачів курсу. Рекомендую використовувати `draw.io`. {{% /callout %}}

------------------------------------------------------------------------

## 2.4. Створення блок-схем з використанням draw.io {#chapter24}

Варто звернути увагу, що усі діаграми для лекцій створені саме у `draw.io` і можете завантажити їх у [публічному репозиторії курсу на github](https://github.com/kleban/csharp-basics-public/blob/master/diagrams/).

На даний момент проект є безкоштовним і розміщується за адресою <http://diagrams.net/>.

Досить зручною функцією є інтеграція сервісами для зберігання файлів діаграм:

-   {{< icon name="google-drive" pack="fab" >}} Google Drive.
-   {{< icon name="cloud" pack="fas" >}} OneDrive.
-   {{< icon name="dropbox" pack="fab" >}} Dropbox.
-   {{< icon name="github" pack="fab" >}} GitHub.
-   {{< icon name="gitlab" pack="fab" >}} GitLab.

{{< figure src="/uploads/courses/csharp-basics/lecture2/draw_io_1.png" title="Рис. 2.15. Вибір джерела для збереження draw.io" >}}

Графічний інтерфейс `draw.io` є досить зручним у користуванні і дозволяє доповнити перелік доступних зображень, блоків, логотипів продуктів для створення схем будь-якого рівня складності.

{{< figure src="/uploads/courses/csharp-basics/lecture2/draw_io_2.png" title="Рис. 2.16. UI головного вікна програми draw.io для Windows" >}}

Досить зручною є функція збереження діаграм для публікації у веб або на паперових носіях формати файлів (png, jpeg, svg, pdf, html, xml), а також вбудовування їх у різні типи документів, що надають сервіси `Google` та `Microsoft`.

Для початку ознайомлення з сервісом `draw.io` рекомендую переглянути коротке відео:

{{< youtube Z0D96ZikMkc >}}

*Джерело: [youtube канал draw.io](https://www.youtube.com/channel/UCiTtRN9b8P4CoSfpkfgEJHA)*

------------------------------------------------------------------------

## Контрольні запитання {#chapter2c}

1.  Дати визначення поняття «алгоритм»?
2.  Перелічіть властивості алгоритмів.
3.  Якими способами можна представити алгоритм?
4.  Які типові блоки для формування блок-схем алгоритмів ви знаєте? Як вони зображуються графічно?


## Список використаних джерел 

1. Ada Lovelace on Wikipedia. Url: https://en.wikipedia.org/wiki/Ada_Lovelace
2. DiagramDesigner. Url: https://logicnet.dk/DiagramDesigner/
2. Draw.IO. Url: https://www.diagrams.net/

1. Albahari, J., & Albahari, B. (2012). C# 5.0 in a Nutshell, Fifth Edition. 1005 Gravenstein Highway North, Sebastopol, USA: O’Reilly Media, Inc.
1. Cardelli, L., & Wegner, P. (December 1985 p.). On Understanding Types, Data Abstraction, and Polymorphism. ACM Computing 1. Surveys, 17(4), сс. 149-154. Отримано з http://lucacardelli.name/Papers/OnUnderstanding.A4.pdf
1. Kort, W. d. (2013). Exam Ref 70-483: Programming in C#. Sebastopol, California 95472: O’Reilly Media, Inc.
1. MSDN. (без дати). Отримано з Microsoft Developer Network: http://msdn.microsoft.com/
1. Биллиг, А. (2005). Основы программирования на C#. Москва, Россия: НОУ ИНТУИТ.
1. Нейгел, К. И. (2011). С# 4.0 и платформа .NET 4 для профессионалов. Москва, Россия: ООО "И.Д. Вильямс".
1. Павловская, Т. (2009). С#. Программирование на языке высокого уровня. Учебник для вузов. СПб, Россия: Питер.
