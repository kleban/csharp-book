---
title: Тема Х1. Використання GitHub для колективної розробки проєктів на .NET
keywords: GitHub, .NET, колективна розробка, контроль версій, гілки, pull request, merge, конфлікти, CI/CD, код-рев’ю
description: "Ця лекція присвячена використанню GitHub у процесі командної розробки проєктів на .NET. Ми розглянемо основні принципи роботи з репозиторіями, управління гілками, розподіл ролей у команді, використання pull requests, а також вирішення конфліктів у коді."
author: "Юрій Клебан"
date: "01/02/2025"
date-format: short
---

## Вступ

GitHub – це платформа для контролю версій, що дозволяє командам ефективно співпрацювати над програмними проєктами. У цій лекції ми розглянемо: - Основи роботи з репозиторієм - Створення та управління гілками - Колективну роботу різних ролей у проєкті - Використання pull request та вирішення конфліктів

## 1. Створення репозиторію

### 1.1. Ініціалізація нового репозиторію

#### Через GitHub

1.  Відкрити [GitHub](https://github.com/) і увійти в акаунт
2.  Натиснути `New repository`
3.  Ввести назву репозиторію, вибрати `Public` або `Private`
4.  Натиснути `Create repository`

#### Через командний рядок

``` sh
mkdir MyDotNetProject
cd MyDotNetProject
git init
git remote add origin https://github.com/user/repository.git
git branch -M main
git push -u origin main
```

## 2. Ролі та рівні доступу

### 2.1. Lead Developer (Технічний Лід)

-   Відповідає за архітектуру проєкту
-   Перевіряє та зливає pull requests
-   Контролює CI/CD процеси
-   Налаштовує політики репозиторію

### 2.2. Developer (Розробник)

-   Виконує завдання у своїй гілці
-   Подає pull request для злиття
-   Бере участь у код-рев’ю

### 2.3. Рівні доступу

-   `Admin` – повний доступ до репозиторію
-   `Maintainer` – управління пул-реквестами та гілками
-   `Contributor` – внесення змін через pull request

## 3. Робота з гілками

### 3.1. Створення нової гілки

``` sh
git checkout -b feature/new-feature
```

### 3.2. Перемикання між гілками

``` sh
git checkout main
```

### 3.3. Завантаження змін в гілку

``` sh
git add .
git commit -m "Added new feature"
git push origin feature/new-feature
```

## 4. Робота з Pull Requests

### 4.1. Створення Pull Request

1.  Перейти у вкладку `Pull requests` у GitHub
2.  Натиснути `New Pull Request`
3.  Вибрати вихідну та цільову гілку
4.  Додати опис змін
5.  Надіслати на рев’ю

### 4.2. Перегляд та злиття Pull Request

1.  Lead Developer перевіряє код
2.  Якщо немає конфліктів, натискає `Merge Pull Request`
3.  Видаляє стару гілку, якщо вона більше не потрібна

## 5. Вирішення конфліктів

### 5.1. Виявлення конфлікту

``` sh
git pull origin main
```

Якщо конфлікт є, Git повідомить про це.

### 5.2. Ручне вирішення конфлікту

1.  Відкрити файли з конфліктами
2.  Виправити код вручну
3.  Виконати коміт змін:

``` sh
git add conflicted_file.cs
git commit -m "Resolved merge conflict"
git push origin feature/new-feature
```

4.  Повторити спробу злиття

## Висновок

GitHub – потужний інструмент для командної роботи над .NET проєктами. Використання гілок, pull request'ів та розподіл ролей допомагає ефективно керувати кодом і уникати конфліктів.

---

Створено за допомогою OpenAI :)